{"ast":null,"code":"let characters = '';\nlet passwordLength = 0; //Uppercase Method\n\nconst setUpperCase = isUpperCase => {\n  if (isUpperCase) {\n    characters += 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\n  }\n\n  return '';\n}; //Lowercase\n\n\nconst setLowerCase = isLowerCase => {\n  if (isLowerCase) {\n    characters += 'abcdefghijklmnñopqrstuvwxyz';\n  }\n\n  return '';\n}; //Special characters\n\n\nconst setSymbols = isSymbol => {\n  if (isSymbol) {\n    characters += '\"!@#$%^&*()<>,.?/[]{}-=_+|/';\n  }\n\n  return '';\n}; //Numbers\n\n\nconst setNumber = isNumeric => {\n  if (isNumeric) {\n    characters += '0123456789';\n  }\n\n  return '';\n};\n\ncharacters = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz!\"@#$%^&*()<>,.?/[]{}-=_+|/0123456789';\n\nconst getRandomInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}; //Password characters\n\n\nconst passwordCharacters = () => {\n  let password = '';\n\n  if (characters.length) {\n    for (let i = 0; i < passwordLength; i++) {\n      password += characters[getRandomInteger(0, characters.length - 1)];\n    }\n\n    characters = '';\n    passwordLength = 0;\n    return password;\n  }\n}; //FOR EXPORT//\n//Set password length\n\n\nexport const setPasswordLength = length => {\n  passwordLength = length;\n  return passwordLength;\n}; //Password method\n\nexport const generatePassword = (passwordProps, pwdLength) => {\n  const {\n    uppercase,\n    lowercase,\n    symbols,\n    numbers\n  } = passwordProps;\n  setPasswordLength(pwdLength);\n  setUpperCase(uppercase);\n  setLowerCase(lowercase);\n  setSymbols(symbols);\n  setNumber(numbers);\n  const password = passwordCharacters();\n  return password;\n};","map":{"version":3,"sources":["/home/alesitom/Ale/password-generator/src/utils/Helper.js"],"names":["characters","passwordLength","setUpperCase","isUpperCase","setLowerCase","isLowerCase","setSymbols","isSymbol","setNumber","isNumeric","getRandomInteger","min","max","Math","floor","random","passwordCharacters","password","length","i","setPasswordLength","generatePassword","passwordProps","pwdLength","uppercase","lowercase","symbols","numbers"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAIC,cAAc,GAAG,CAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAGC,WAAW,IAAI;AAChC,MAAIA,WAAJ,EAAiB;AACbH,IAAAA,UAAU,IAAI,6BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD,C,CAOA;;;AACA,MAAMI,YAAY,GAAGC,WAAW,IAAI;AAChC,MAAIA,WAAJ,EAAiB;AACbL,IAAAA,UAAU,IAAI,6BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD,C,CAOA;;;AACA,MAAMM,UAAU,GAAGC,QAAQ,IAAI;AAC3B,MAAIA,QAAJ,EAAc;AACVP,IAAAA,UAAU,IAAI,6BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD,C,CAOA;;;AACA,MAAMQ,SAAS,GAAGC,SAAS,IAAI;AAC3B,MAAIA,SAAJ,EAAe;AACXT,IAAAA,UAAU,IAAI,YAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD;;AAOAA,UAAU,GAAG,6FAAb;;AAEA,MAAMU,gBAAgB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH,CAFD,C,CAKA;;;AAEA,MAAMK,kBAAkB,GAAG,MAAM;AAC7B,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIjB,UAAU,CAACkB,MAAf,EAAuB;AACnB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,cAApB,EAAoCkB,CAAC,EAArC,EAAyC;AACrCF,MAAAA,QAAQ,IAAIjB,UAAU,CAACU,gBAAgB,CAAC,CAAD,EAAIV,UAAU,CAACkB,MAAX,GAAoB,CAAxB,CAAjB,CAAtB;AACH;;AACDlB,IAAAA,UAAU,GAAG,EAAb;AACAC,IAAAA,cAAc,GAAG,CAAjB;AACA,WAAOgB,QAAP;AACH;AACJ,CAVD,C,CAYA;AACA;;;AACA,OAAO,MAAMG,iBAAiB,GAAGF,MAAM,IAAI;AACvCjB,EAAAA,cAAc,GAAGiB,MAAjB;AACA,SAAOjB,cAAP;AACH,CAHM,C,CAKP;;AAEA,OAAO,MAAMoB,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAC1D,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAA6CL,aAAnD;AACAF,EAAAA,iBAAiB,CAACG,SAAD,CAAjB;AACArB,EAAAA,YAAY,CAACsB,SAAD,CAAZ;AACApB,EAAAA,YAAY,CAACqB,SAAD,CAAZ;AACAnB,EAAAA,UAAU,CAACoB,OAAD,CAAV;AACAlB,EAAAA,SAAS,CAACmB,OAAD,CAAT;AACA,QAAMV,QAAQ,GAAGD,kBAAkB,EAAnC;AACA,SAAOC,QAAP;AACH,CATM","sourcesContent":["let characters = '';\nlet passwordLength = 0;\n\n//Uppercase Method\nconst setUpperCase = isUpperCase => {\n    if (isUpperCase) {\n        characters += 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\n    }\n    return '';\n}\n\n//Lowercase\nconst setLowerCase = isLowerCase => {\n    if (isLowerCase) {\n        characters += 'abcdefghijklmnñopqrstuvwxyz';\n    }\n    return '';\n}\n\n//Special characters\nconst setSymbols = isSymbol => {\n    if (isSymbol) {\n        characters += '\"!@#$%^&*()<>,.?/[]{}-=_+|/';\n    }\n    return '';\n}\n\n//Numbers\nconst setNumber = isNumeric => {\n    if (isNumeric) {\n        characters += '0123456789';\n    }\n    return '';\n}\n\ncharacters = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz!\"@#$%^&*()<>,.?/[]{}-=_+|/0123456789';\n\nconst getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\n//Password characters\n\nconst passwordCharacters = () => {\n    let password = '';\n    if (characters.length) {\n        for (let i = 0; i < passwordLength; i++) {\n            password += characters[getRandomInteger(0, characters.length - 1)];\n        }\n        characters = '';\n        passwordLength = 0;\n        return password;\n    }\n}\n\n//FOR EXPORT//\n//Set password length\nexport const setPasswordLength = length => {\n    passwordLength = length;\n    return passwordLength;\n}\n\n//Password method\n\nexport const generatePassword = (passwordProps, pwdLength) => {\n    const { uppercase, lowercase, symbols, numbers } = passwordProps;\n    setPasswordLength(pwdLength);\n    setUpperCase(uppercase);\n    setLowerCase(lowercase);\n    setSymbols(symbols);\n    setNumber(numbers);\n    const password = passwordCharacters();\n    return password;\n}"]},"metadata":{},"sourceType":"module"}