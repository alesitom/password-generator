{"ast":null,"code":"let characters = '';\nlet passwordLength = 0;\n\nconst setUpperCase = isUpperCase => {\n  if (isUpperCase) {\n    characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  }\n\n  return '';\n};\n\nconst setLowerCase = isLowerCase => {\n  if (isLowerCase) {\n    characters += 'abcdefghijklmnopqrstuvwxyz';\n  }\n\n  return '';\n};\n\nconst setSymbols = isSymbol => {\n  if (isSymbol) {\n    characters += '!@#$%^&*()<>,.?/[]{}-=_+|/';\n  }\n\n  return '';\n};\n\nconst setNumber = isNumeric => {\n  if (isNumeric) {\n    characters += '0123456789';\n  }\n\n  return '';\n};\n\nconst getRandomInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst passwordCharacters = () => {\n  const characterList = characters;\n  let password = '';\n\n  if (characterList.length > 0) {\n    for (let i = 0; i < passwordLength; i++) {\n      password += characterList[getRandomInteger(0, characterList.length - 1)];\n    }\n\n    characters = '';\n    passwordLength = 0;\n    return password;\n  }\n};\n\nexport const setPasswordLength = length => {\n  passwordLength = length;\n  return passwordLength;\n};\nexport const generatePasswordLength = () => {\n  return passwordLength;\n};\nexport const generatePassword = (passwordProps, pwdLength) => {\n  const {\n    uppercase,\n    lowercase,\n    symbols,\n    numbers\n  } = passwordProps;\n  setPasswordLength(pwdLength);\n  setUpperCase(uppercase);\n  setLowerCase(lowercase);\n  setSymbols(symbols);\n  setNumber(numbers);\n  const password = passwordCharacters();\n  return password;\n};\nexport const copyToClipBoard = elementRef => {\n  elementRef.select();\n  document.execCommand('copy');\n};","map":{"version":3,"sources":["/home/alesitom/Ale/password-generator/src/utils/Helper.js"],"names":["characters","passwordLength","setUpperCase","isUpperCase","setLowerCase","isLowerCase","setSymbols","isSymbol","setNumber","isNumeric","getRandomInteger","min","max","Math","floor","random","passwordCharacters","characterList","password","length","i","setPasswordLength","generatePasswordLength","generatePassword","passwordProps","pwdLength","uppercase","lowercase","symbols","numbers","copyToClipBoard","elementRef","select","document","execCommand"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAIC,cAAc,GAAG,CAArB;;AAEA,MAAMC,YAAY,GAAGC,WAAW,IAAI;AAChC,MAAIA,WAAJ,EAAiB;AACbH,IAAAA,UAAU,IAAI,4BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD;;AAOA,MAAMI,YAAY,GAAGC,WAAW,IAAI;AAChC,MAAIA,WAAJ,EAAiB;AACbL,IAAAA,UAAU,IAAI,4BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD;;AAOA,MAAMM,UAAU,GAAGC,QAAQ,IAAI;AAC3B,MAAIA,QAAJ,EAAc;AACVP,IAAAA,UAAU,IAAI,4BAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD;;AAOA,MAAMQ,SAAS,GAAGC,SAAS,IAAI;AAC3B,MAAIA,SAAJ,EAAe;AACXT,IAAAA,UAAU,IAAI,YAAd;AACH;;AACD,SAAO,EAAP;AACH,CALD;;AAOA,MAAMU,gBAAgB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH,CAFD;;AAIA,MAAMK,kBAAkB,GAAG,MAAM;AAC7B,QAAMC,aAAa,GAAGjB,UAAtB;AACA,MAAIkB,QAAQ,GAAG,EAAf;;AACA,MAAID,aAAa,CAACE,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,cAApB,EAAoCmB,CAAC,EAArC,EAAyC;AACrCF,MAAAA,QAAQ,IAAID,aAAa,CAACP,gBAAgB,CAAC,CAAD,EAAIO,aAAa,CAACE,MAAd,GAAuB,CAA3B,CAAjB,CAAzB;AACH;;AACDnB,IAAAA,UAAU,GAAG,EAAb;AACAC,IAAAA,cAAc,GAAG,CAAjB;AAEA,WAAOiB,QAAP;AACH;AACJ,CAZD;;AAcA,OAAO,MAAMG,iBAAiB,GAAGF,MAAM,IAAI;AACvClB,EAAAA,cAAc,GAAGkB,MAAjB;AACA,SAAOlB,cAAP;AACH,CAHM;AAKP,OAAO,MAAMqB,sBAAsB,GAAG,MAAM;AACxC,SAAOrB,cAAP;AACH,CAFM;AAIP,OAAO,MAAMsB,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAC1D,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAA6CL,aAAnD;AAEAH,EAAAA,iBAAiB,CAACI,SAAD,CAAjB;AACAvB,EAAAA,YAAY,CAACwB,SAAD,CAAZ;AACAtB,EAAAA,YAAY,CAACuB,SAAD,CAAZ;AACArB,EAAAA,UAAU,CAACsB,OAAD,CAAV;AACApB,EAAAA,SAAS,CAACqB,OAAD,CAAT;AAEA,QAAMX,QAAQ,GAAGF,kBAAkB,EAAnC;AACA,SAAOE,QAAP;AACH,CAXM;AAaP,OAAO,MAAMY,eAAe,GAAGC,UAAU,IAAI;AACzCA,EAAAA,UAAU,CAACC,MAAX;AACAC,EAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB;AACH,CAHM","sourcesContent":["let characters = '';\nlet passwordLength = 0;\n\nconst setUpperCase = isUpperCase => {\n    if (isUpperCase) {\n        characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    return '';\n}\n\nconst setLowerCase = isLowerCase => {\n    if (isLowerCase) {\n        characters += 'abcdefghijklmnopqrstuvwxyz';\n    }\n    return '';\n}\n\nconst setSymbols = isSymbol => {\n    if (isSymbol) {\n        characters += '!@#$%^&*()<>,.?/[]{}-=_+|/';\n    }\n    return '';\n}\n\nconst setNumber = isNumeric => {\n    if (isNumeric) {\n        characters += '0123456789';\n    }\n    return '';\n}\n\nconst getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst passwordCharacters = () => {\n    const characterList = characters;\n    let password = '';\n    if (characterList.length > 0) {\n        for (let i = 0; i < passwordLength; i++) {\n            password += characterList[getRandomInteger(0, characterList.length - 1)];\n        }\n        characters = '';\n        passwordLength = 0;\n\n        return password;\n    }\n}\n\nexport const setPasswordLength = length => {\n    passwordLength = length;\n    return passwordLength;\n}\n\nexport const generatePasswordLength = () => {\n    return passwordLength;\n}\n\nexport const generatePassword = (passwordProps, pwdLength) => {\n    const { uppercase, lowercase, symbols, numbers } = passwordProps;\n\n    setPasswordLength(pwdLength);\n    setUpperCase(uppercase);\n    setLowerCase(lowercase);\n    setSymbols(symbols);\n    setNumber(numbers);\n\n    const password = passwordCharacters();\n    return password;\n}\n\nexport const copyToClipBoard = elementRef => {\n    elementRef.select();\n    document.execCommand('copy');\n}"]},"metadata":{},"sourceType":"module"}