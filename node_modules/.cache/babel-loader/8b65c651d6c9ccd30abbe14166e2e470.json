{"ast":null,"code":"var _jsxFileName = \"/home/alesitom/Ale/password-generator/src/components/container/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport './Container.css';\nimport Button from './button/Button';\nimport Slider from './slider/Slider';\nimport CheckBox from './checkbox/CheckBox';\nimport { generatePassword, setPasswordLength, copyToClipBoard } from '../../utils/Helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHECKBOX_LIST = [{\n  id: 0,\n  name: 'uppercase',\n  label: 'Uppercase',\n  isChecked: true\n}, {\n  id: 1,\n  name: 'lowercase',\n  label: 'Lowercase',\n  isChecked: true\n}, {\n  id: 2,\n  name: 'symbols',\n  label: 'Symbols',\n  isChecked: true\n}, {\n  id: 3,\n  name: 'numbers',\n  label: 'Numbers',\n  isChecked: true\n}];\n\nconst Container = props => {\n  _s();\n\n  const {\n    setPassword,\n    setRange,\n    setPasswordProps,\n    passwordRef,\n    type\n  } = props;\n  const [rangeValue, setRangeValue] = useState(12);\n  const [checkbox, setCheckBox] = useState({\n    uppercase: true,\n    lowercase: true,\n    symbols: true,\n    numbers: true\n  });\n  const [checked, setChecked] = useState(false);\n  const [checkedName, setCheckedName] = useState('');\n  const [minMaxValue, setMinMaxValue] = useState({\n    min: 1,\n    max: 60\n  });\n  const {\n    uppercase,\n    lowercase,\n    symbols,\n    numbers\n  } = checkbox;\n  const {\n    min,\n    max\n  } = minMaxValue;\n  useEffect(() => {\n    setPasswordLength(rangeValue);\n    setRange(rangeValue);\n    setRangeValue(rangeValue);\n    passwordGenerated(checkbox, rangeValue);\n    checkBoxCount(); // eslint-disable-next-line\n  }, [uppercase, lowercase, symbols, numbers]);\n\n  const checkBoxCount = () => {\n    const checkedCount = Object.keys(checkbox).filter(key => checkbox[key]);\n    const disabled = checkedCount.length === 1;\n    const name = checkedCount[0];\n\n    if (disabled) {\n      setChecked(disabled);\n      setCheckedName(name);\n    } else {\n      setChecked(false);\n      setCheckedName('');\n    }\n  };\n\n  const updateCheckBoxes = () => {\n    if (type === 'pin') {\n      CHECKBOX_LIST.map(checkbox => {\n        const name = checkbox.name;\n\n        if (name !== 'numbers') {\n          checkbox.isChecked = false;\n          const checkboxProps = {\n            name,\n            checkedName: name,\n            checked: true,\n            isChecked: checkbox.isChecked,\n            min: 0,\n            max: 15,\n            length: 3\n          };\n          checkBoxProperties(checkboxProps);\n        }\n\n        return '';\n      });\n    } else {\n      CHECKBOX_LIST.map(checkbox => {\n        const name = checkbox.name;\n        checkbox.isChecked = true;\n        const checkboxProps = {\n          name,\n          checkedName: '',\n          checked: false,\n          isChecked: checkbox.isChecked,\n          min: 1,\n          max: 60,\n          length: 12\n        };\n        checkBoxProperties(checkboxProps);\n        return '';\n      });\n    }\n  };\n\n  const checkBoxProperties = checkBoxProps => {\n    const {\n      name,\n      checked,\n      isChecked,\n      checkedName,\n      min,\n      max,\n      length\n    } = checkBoxProps;\n    setCheckBox(prevState => ({ ...prevState,\n      [name]: isChecked\n    }));\n    setChecked(checked);\n    setCheckedName(checkedName);\n    setPasswordLength(length);\n    setMinMaxValue({\n      min,\n      max\n    });\n    setRangeValue(length);\n    setRange(length);\n  };\n\n  useMemo(updateCheckBoxes, [type]);\n\n  const passwordGenerated = (checkbox, rangeValue) => {\n    const pwd = rangeValue > 3 ? generatePassword(checkbox, rangeValue) : generatePassword(checkbox, 3);\n    setPassword(pwd);\n    setPasswordProps(checkbox);\n  };\n\n  const onChangeSlider = e => {\n    setPasswordLength(e.target.value);\n    setRangeValue(e.target.value);\n    setRange(e.target.value);\n    passwordGenerated(checkbox, e.target.value);\n  };\n\n  const onChangeCheckBox = e => {\n    if (type !== 'pin') {\n      let {\n        name,\n        checked\n      } = e.target;\n      CHECKBOX_LIST.map(checkbox => {\n        if (checkbox.name === name) {\n          checkbox.isChecked = checked;\n          setCheckBox(prevState => ({ ...prevState,\n            [name]: checkbox.isChecked\n          }));\n          setPasswordLength(rangeValue);\n          setRangeValue(rangeValue);\n        }\n\n        return '';\n      });\n    }\n  };\n\n  const copyClipBoard = elementRef => e => {\n    e.preventDefault();\n    copyToClipBoard(elementRef);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"password-settings\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"h3\",\n      children: \"Use the slider, and select from the options.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [\"\\xA0\", /*#__PURE__*/_jsxDEV(Slider, {\n            min: parseInt(min, 10),\n            max: parseInt(max, 10),\n            step: 1,\n            defaultLength: parseInt(rangeValue, 10),\n            value: parseInt(rangeValue, 10),\n            onChangeValue: onChangeSlider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row checkbox-container\",\n          children: CHECKBOX_LIST.map(checkbox => /*#__PURE__*/_jsxDEV(CheckBox, {\n            name: checkbox.name,\n            checked: checkbox.isChecked,\n            label: checkbox.label,\n            value: checkbox.isChecked,\n            onChange: onChangeCheckBox,\n            disabled: checked && checkbox.isChecked && checkedName === checkbox.name\n          }, checkbox.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn password-btn\",\n            label: \"Copy Password\",\n            handleClick: copyClipBoard(passwordRef.current)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Container, \"FkqEe/HmOO0fFJCJa6kvjOaQ+1c=\");\n\n_c = Container;\nexport { Container };\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/alesitom/Ale/password-generator/src/components/container/Container.js"],"names":["React","useState","useEffect","useMemo","Button","Slider","CheckBox","generatePassword","setPasswordLength","copyToClipBoard","CHECKBOX_LIST","id","name","label","isChecked","Container","props","setPassword","setRange","setPasswordProps","passwordRef","type","rangeValue","setRangeValue","checkbox","setCheckBox","uppercase","lowercase","symbols","numbers","checked","setChecked","checkedName","setCheckedName","minMaxValue","setMinMaxValue","min","max","passwordGenerated","checkBoxCount","checkedCount","Object","keys","filter","key","disabled","length","updateCheckBoxes","map","checkboxProps","checkBoxProperties","checkBoxProps","prevState","pwd","onChangeSlider","e","target","value","onChangeCheckBox","copyClipBoard","elementRef","preventDefault","parseInt","current"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\n\nimport './Container.css';\nimport Button from './button/Button';\nimport Slider from './slider/Slider';\nimport CheckBox from './checkbox/CheckBox';\nimport { generatePassword, setPasswordLength, copyToClipBoard } from '../../utils/Helper';\n\nconst CHECKBOX_LIST = [\n    {\n        id: 0,\n        name: 'uppercase',\n        label: 'Uppercase',\n        isChecked: true\n    },\n    {\n        id: 1,\n        name: 'lowercase',\n        label: 'Lowercase',\n        isChecked: true\n    },\n    {\n        id: 2,\n        name: 'symbols',\n        label: 'Symbols',\n        isChecked: true\n    },\n    {\n        id: 3,\n        name: 'numbers',\n        label: 'Numbers',\n        isChecked: true\n    },\n];\n\nconst Container = props => {\n    const { setPassword, setRange, setPasswordProps, passwordRef, type } = props;\n\n    const [rangeValue, setRangeValue] = useState(12);\n    const [checkbox, setCheckBox] = useState({\n        uppercase: true,\n        lowercase: true,\n        symbols: true,\n        numbers: true\n    });\n    const [checked, setChecked] = useState(false);\n    const [checkedName, setCheckedName] = useState(''); \n    const [minMaxValue, setMinMaxValue] = useState({\n        min: 1,\n        max: 60\n    });\n\n    const { uppercase, lowercase, symbols, numbers } = checkbox;\n    const { min, max } = minMaxValue;\n\n    useEffect(() => {\n        setPasswordLength(rangeValue);\n        setRange(rangeValue);\n        setRangeValue(rangeValue);\n        passwordGenerated(checkbox, rangeValue);\n\n        checkBoxCount();\n\n        // eslint-disable-next-line\n    }, [uppercase, lowercase, symbols, numbers]);\n\n    const checkBoxCount = () => {\n        const checkedCount = Object.keys(checkbox).filter(key => checkbox[key]);\n        const disabled = checkedCount.length === 1;\n        const name = checkedCount[0];\n        if (disabled) {\n            setChecked(disabled);\n            setCheckedName(name);\n        } else {\n            setChecked(false);\n            setCheckedName('');\n        }\n    }\n\n    const updateCheckBoxes = () => {\n        if (type === 'pin') {\n            CHECKBOX_LIST.map(checkbox => {\n                const name = checkbox.name;\n                if (name !== 'numbers') {\n                    checkbox.isChecked = false;\n                    const checkboxProps = {\n                        name,\n                        checkedName: name,\n                        checked: true,\n                        isChecked: checkbox.isChecked,\n                        min: 0,\n                        max: 15,\n                        length: 3\n                    };\n                    checkBoxProperties(checkboxProps);\n                }\n                return '';\n            });\n        } else {\n            CHECKBOX_LIST.map(checkbox => {\n                const name = checkbox.name;\n                checkbox.isChecked = true;\n                const checkboxProps = {\n                    name,\n                    checkedName: '',\n                    checked: false,\n                    isChecked: checkbox.isChecked,\n                    min: 1,\n                    max: 60,\n                    length: 12\n                };\n                checkBoxProperties(checkboxProps);\n                return '';\n            });\n        }\n    }\n\n    const checkBoxProperties = checkBoxProps => {\n        const { name, checked, isChecked, checkedName, min, max, length } = checkBoxProps;\n\n        setCheckBox(prevState => ({ ...prevState, [name]: isChecked }));\n        setChecked(checked);\n        setCheckedName(checkedName);\n        setPasswordLength(length);\n        setMinMaxValue({ min, max });\n        setRangeValue(length);\n        setRange(length);\n    }\n\n    useMemo(updateCheckBoxes, [type]);\n\n    const passwordGenerated = (checkbox, rangeValue) => {\n        const pwd = rangeValue > 3 ? generatePassword(checkbox, rangeValue) : generatePassword(checkbox, 3);\n        setPassword(pwd);\n        setPasswordProps(checkbox);\n    }\n\n    const onChangeSlider = e => {\n        setPasswordLength(e.target.value);\n        setRangeValue(e.target.value);\n        setRange(e.target.value);\n        passwordGenerated(checkbox, e.target.value);\n    }\n\n    const onChangeCheckBox = e => {\n        if (type !== 'pin') {\n            let { name, checked } = e.target;\n            CHECKBOX_LIST.map(checkbox => {\n                if (checkbox.name === name) {\n                    checkbox.isChecked = checked;\n                    setCheckBox(prevState => ({ ...prevState, [name]: checkbox.isChecked }));\n                    setPasswordLength(rangeValue);\n                    setRangeValue(rangeValue);\n                }\n                \n                return '';\n            });\n        }\n    }\n\n    const copyClipBoard = elementRef => e => {\n        e.preventDefault();\n        copyToClipBoard(elementRef);\n    }\n\n    return (\n        <div className=\"password-settings\">\n            <h3 className=\"h3\">Use the slider, and select from the options.</h3>\n\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"form-group\">\n                        &nbsp;\n                        <Slider \n                            min={parseInt(min, 10)}\n                            max={parseInt(max, 10)}\n                            step={1}\n                            defaultLength={parseInt(rangeValue, 10)}\n                            value={parseInt(rangeValue, 10)}\n                            onChangeValue={onChangeSlider}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"col-md-12\">\n                    <div className=\"row checkbox-container\">\n                        {\n                            CHECKBOX_LIST.map(checkbox =>\n                                <CheckBox \n                                    key={checkbox.id}\n                                    name={checkbox.name}\n                                    checked={checkbox.isChecked}\n                                    label={checkbox.label}\n                                    value={checkbox.isChecked}\n                                    onChange={onChangeCheckBox}\n                                    disabled={\n                                        checked && checkbox.isChecked && checkedName === checkbox.name\n                                    }\n                                />\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n            <br />\n\n            <div className=\"text-center\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Button \n                            className=\"btn password-btn\"\n                            label=\"Copy Password\"\n                            handleClick={copyClipBoard(passwordRef.current)}\n                        />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport { Container };"]},"metadata":{},"sourceType":"module"}