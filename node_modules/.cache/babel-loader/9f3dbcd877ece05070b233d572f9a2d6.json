{"ast":null,"code":"var _jsxFileName = \"/home/alesitom/Ale/password-generator/src/components/display/Display.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './Display.css';\nimport { Container } from '../container/Container';\nimport Button from '../container/button/Button';\nimport Tooltip from '../container/tooltip/Tooltip';\nimport { generatePassword, copyToClipBoard } from '../../utils/Helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Display = () => {\n  _s();\n\n  const [password, setPassword] = useState('');\n  const [rangeValue, setRange] = useState();\n  const [passwordProps, setPasswordProps] = useState();\n  const [tooltip, setTooltip] = useState(false);\n  const [type, setType] = useState('password');\n  const passwordRef = useRef(null);\n  let pwdDescription = '';\n\n  const generateNewPassword = () => {\n    const pwd = rangeValue > 3 ? generatePassword(passwordProps, rangeValue) : generatePassword(passwordProps, 3);\n    setPassword(pwd);\n  };\n\n  const copyClipBoard = e => {\n    e.preventDefault();\n    copyToClipBoard(passwordRef.current);\n    setTooltip(true);\n    setTimeout(() => {\n      setTooltip(false);\n    }, 2000);\n  };\n\n  const onSelectTag = e => {\n    setType(e.target.value);\n  };\n\n  const setBackgroundColor = password => {\n    if (password && password.length === 1 && password.length <= 5) {\n      pwdDescription = 'Bad password';\n      return '#cb473e';\n    } else if (password && password.length >= 6 && password.length <= 10) {\n      pwdDescription = 'Weak password';\n      return '#f07d58';\n    } else if (password && password.length > 10) {\n      pwdDescription = 'Strong password';\n      return '#55a95d';\n    } else {\n      pwdDescription = 'Bad password';\n      return '#cb473e';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"type\",\n        value: type,\n        onChange: onSelectTag,\n        className: \"form-control form-control-sm\",\n        style: selectTagStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"password\",\n          children: \"Random Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pin\",\n          children: \"PIN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 password-display-container\",\n        style: {\n          backgroundColor: setBackgroundColor(password)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"password-display\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: passwordRef,\n              type: \"text\",\n              value: password,\n              className: \"password-display-input\",\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"password-description\",\n            children: password && password.length > 10 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-check-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this), \" \", pwdDescription]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-exclamation-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }, this), \" \", pwdDescription]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"password-display-icons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"copy-btn\",\n            iconClass: \"far fa-copy\",\n            handleClick: copyClipBoard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"generate-btn\",\n            iconClass: \"fas fa-sync-alt\",\n            handleClick: () => generateNewPassword()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            message: \"Copied\",\n            position: \"left\",\n            displayTooltip: tooltip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      type: type,\n      setPassword: setPassword,\n      setRange: setRange,\n      setPasswordProps: setPasswordProps,\n      passwordRef: passwordRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Display, \"OBT1w/+joVI2VokNiAsjlE92Jk4=\");\n\n_c = Display;\nconst selectTagStyle = {\n  backgroundColor: 'inherit',\n  color: '#506175',\n  width: '20%',\n  height: 'auto',\n  marginLeft: '-4px'\n};\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["/home/alesitom/Ale/password-generator/src/components/display/Display.js"],"names":["React","useState","useRef","Container","Button","Tooltip","generatePassword","copyToClipBoard","Display","password","setPassword","rangeValue","setRange","passwordProps","setPasswordProps","tooltip","setTooltip","type","setType","passwordRef","pwdDescription","generateNewPassword","pwd","copyClipBoard","e","preventDefault","current","setTimeout","onSelectTag","target","value","setBackgroundColor","length","selectTagStyle","backgroundColor","width","color","height","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport './Display.css';\nimport { Container } from '../container/Container';\nimport Button from '../container/button/Button';\nimport Tooltip from '../container/tooltip/Tooltip';\nimport { generatePassword, copyToClipBoard } from '../../utils/Helper';\n\nconst Display = () => {\n    const [password, setPassword] = useState('');\n    const [rangeValue, setRange] = useState();\n    const [passwordProps, setPasswordProps] = useState();\n    const [tooltip, setTooltip] = useState(false);\n    const [type, setType] = useState('password');\n    const passwordRef = useRef(null);\n    let pwdDescription = '';\n\n    const generateNewPassword = () => {\n        const pwd = rangeValue > 3 ? generatePassword(passwordProps, rangeValue) : generatePassword(passwordProps, 3);\n        setPassword(pwd);\n    }\n\n    const copyClipBoard = e => {\n        e.preventDefault();\n        copyToClipBoard(passwordRef.current);\n        setTooltip(true);\n        setTimeout(() => {\n            setTooltip(false);\n        }, 2000);\n    }\n\n    const onSelectTag = e => {\n        setType(e.target.value);\n    }\n\n    const setBackgroundColor = password => {\n        if (password && password.length === 1 && password.length <= 5) {\n            pwdDescription = 'Bad password';\n            return '#cb473e';\n        } else if (password && password.length >= 6 && password.length <= 10) {\n            pwdDescription = 'Weak password';\n            return '#f07d58';\n        } else if (password && password.length > 10) {\n            pwdDescription = 'Strong password';\n            return '#55a95d';\n        } else {\n            pwdDescription = 'Bad password';\n            return '#cb473e';\n        }\n    }\n\n    return (\n        <>\n            <div>\n                <select\n                    name=\"type\"\n                    value={type}\n                    onChange={onSelectTag}\n                    className=\"form-control form-control-sm\"\n                    style={selectTagStyle}\n                >\n                    <option value=\"password\">Random Password</option>\n                    <option value=\"pin\">PIN</option>\n                </select>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 password-display-container\"\n                    style={{ backgroundColor: setBackgroundColor(password) }}\n                >\n                    <div style={{ width: '100%' }}>\n                        <div className=\"password-display\">\n                            <input \n                                ref={passwordRef}\n                                type=\"text\"\n                                value={password}\n                                className=\"password-display-input\"\n                                readOnly\n                            />\n                        </div>\n\n                        <div className=\"password-description\">\n                            {\n                                password && password.length > 10 ?\n                                <>\n                                    <i className=\"fas fa-check-circle\"></i> { pwdDescription }\n                                </> :\n                                <>\n                                    <i className=\"fas fa-exclamation-circle\"></i> { pwdDescription }\n                                </>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"password-display-icons\">\n                        <Button\n                            className=\"copy-btn\"\n                            iconClass=\"far fa-copy\"\n                            handleClick={copyClipBoard}\n                        />\n                        <Button\n                            className=\"generate-btn\"\n                            iconClass=\"fas fa-sync-alt\"\n                            handleClick={() => generateNewPassword()}\n                        />\n\n                        <Tooltip \n                            message=\"Copied\"\n                            position=\"left\"\n                            displayTooltip={tooltip}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <Container \n                type={type}\n                setPassword={setPassword}\n                setRange={setRange}\n                setPasswordProps={setPasswordProps}\n                passwordRef={passwordRef}\n            />\n\n        </>\n    )\n}\n\nconst selectTagStyle = {\n    backgroundColor: 'inherit',\n    color: '#506175',\n    width: '20%',\n    height: 'auto',\n    marginLeft: '-4px'\n}\n\nexport default Display;"]},"metadata":{},"sourceType":"module"}